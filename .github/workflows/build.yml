name: Build

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
      - 'hotfix/v*.*.*'
  schedule:
    - cron: '0 5 * * 1'

jobs:
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.metadata.outputs.current_version }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 25
        uses: actions/setup-java@v5
        with:
          java-version: '25'
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Lint
        run: mvn spotless:check

      - name: Build
        run: mvn clean package

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'

      - name: Sonar
        if: github.event.pull_request.head.repo.fork == false
        run: mvn verify sonar:sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Grype source code
        id: grype_source_code
        uses: anchore/scan-action@v7
        with:
          path: .
          fail-build: true
          severity-cutoff: high
          only-fixed: true

      - name: Upload Grype source code report
        if: always() && steps.grype_source_code.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: ${{ steps.grype_source_code.outputs.sarif }}
          category: source-code

      - name: Metadata
        id: metadata
        run: echo current_version=$(echo $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)) >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docsource-jar
          path: target/docsource-${{ steps.metadata.outputs.current_version }}.jar

  build-docker:
    name: Build Docker ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: build-jar
    if: endsWith(needs.build-jar.outputs.current_version, '-SNAPSHOT')
    strategy:
      matrix:
        platform: [ 'linux/amd64', 'linux/arm64' ]
    steps:
      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          name: docsource-jar
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Metadata
        id: metadata
        run: |
          platform_slug=$(echo ${{ matrix.platform }} | sed 's/\//-/g')
          echo platform_slug=$platform_slug >> $GITHUB_OUTPUT
          echo image_name=loicgreffier/docsource:${{ needs.build-jar.outputs.current_version }}-$platform_slug-jar >> $GITHUB_OUTPUT

      - name: Docker build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/jar.Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: ${{ steps.metadata.outputs.image_name }}
        env:
          DOCKER_BUILD_SUMMARY: false

      - name: Grype Docker image
        id: grype_docker_image
        uses: anchore/scan-action@v7
        with:
          image: ${{ steps.metadata.outputs.image_name }}
          fail-build: true
          severity-cutoff: high
          only-fixed: true

      - name: Upload Grype Docker image report
        if: always() && steps.grype_docker_image.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: ${{ steps.grype_docker_image.outputs.sarif }}
          category: docker-image-${{ steps.metadata.outputs.platform_slug }}

  push-docker:
    name: Push Docker
    runs-on: ubuntu-latest
    needs: [ build-jar, build-docker ]
    if: github.ref == 'refs/heads/main' && endsWith(needs.build-jar.outputs.current_version, '-SNAPSHOT')
    steps:
      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          name: docsource-jar
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/jar.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: loicgreffier/docsource:${{ needs.build-jar.outputs.current_version }}-jar
        env:
          DOCKER_BUILD_SUMMARY: false

  build-native:
    name: Build Native Image ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    outputs:
      current_version: ${{ steps.metadata.outputs.current_version }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'ubuntu-24.04-arm', 'windows-latest', 'macos-latest' ]
        include:
          - os: 'ubuntu-latest'
            platform: 'linux-amd64'
            extension: ''
          - os: 'ubuntu-24.04-arm'
            platform: 'linux-arm64'
            extension: ''
          - os: 'macos-latest'
            platform: 'darwin-arm64'
            extension: ''
          - os: 'windows-latest'
            platform: 'windows-amd64'
            extension: '.exe'
    steps:
      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: '25'
          native-image-musl: ${{ matrix.os == 'ubuntu-latest' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Lint
        run: mvn spotless:check

      - name: Build
        run: mvn clean package -Pnative -PnativeTest ${{ matrix.os == 'ubuntu-latest' && '-Pnative-static-musl' || '' }}

      - name: Publish native test report
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/native-test-reports/TEST-*.xml'

      - name: Metadata
        id: metadata
        run: echo current_version=$(echo $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)) >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docsource-${{ matrix.platform }}
          path: target/docsource-${{ steps.metadata.outputs.current_version }}${{ matrix.extension }}

  build-docker-native:
    name: Build Docker Native Image ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: build-native
    if: endsWith(needs.build-native.outputs.current_version, '-SNAPSHOT')
    strategy:
      matrix:
        platform: [ 'linux/amd64', 'linux/arm64' ]
    steps:
      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          pattern: docsource-linux-*
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Metadata
        id: metadata
        run: |
          platform_slug=$(echo ${{ matrix.platform }} | sed 's/\//-/g')
          echo platform_slug=$platform_slug >> $GITHUB_OUTPUT
          echo image_name=loicgreffier/docsource:${{ needs.build-native.outputs.current_version }}-$platform_slug >> $GITHUB_OUTPUT

      - name: Docker build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: ${{ steps.metadata.outputs.image_name }}
        env:
          DOCKER_BUILD_SUMMARY: false

      - name: Grype Docker image
        id: grype_docker_image
        uses: anchore/scan-action@v7
        with:
          image: ${{ steps.metadata.outputs.image_name }}
          fail-build: true
          severity-cutoff: high
          only-fixed: true

      - name: Upload Grype Docker image report
        if: always() && steps.grype_docker_image.outputs.sarif != ''
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: ${{ steps.grype_docker_image.outputs.sarif }}
          category: docker-image-native-${{ steps.metadata.outputs.platform_slug }}

  push-docker-native:
    name: Push Docker Native Image
    runs-on: ubuntu-latest
    needs: [ build-native, build-docker-native ]
    if: github.ref == 'refs/heads/main' && endsWith(needs.build-native.outputs.current_version, '-SNAPSHOT')
    steps:
      - name: Checkout project
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download native artifact
        uses: actions/download-artifact@v6
        with:
          pattern: docsource-linux-*
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: loicgreffier/docsource:${{ needs.build-native.outputs.current_version }}
        env:
          DOCKER_BUILD_SUMMARY: false