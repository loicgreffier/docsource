name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-jar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: maven

      - name: Build and test
        run: mvn clean package

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'

      - name: Docker
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          LATEST_VERSION=$(git tag -l --sort=-version:refname | head -1 | cut -d 'v' -f 2)
          if [ "$LATEST_VERSION" == "$CURRENT_VERSION" ]; then
            echo "Latest version is $LATEST_VERSION. Current version is $CURRENT_VERSION. Pushing latest tag."
            mvn clean package -DskipTests jib:build -Djib.to.auth.username=$DOCKER_USER -Djib.to.auth.password=$DOCKER_TOKEN -Djib.to.tags=latest-jar
          else
            echo "Latest version is $LATEST_VERSION. Current version is $CURRENT_VERSION. Pushing latest tag."
            mvn clean package -P production jib:build -Djib.to.auth.username=$DOCKER_USER -Djib.to.auth.password=$DOCKER_TOKEN
          fi
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      - name: Generate release changelog
        uses: mikepenz/release-changelog-builder-action@v5
        id: build_changelog
        with:
          configuration: "changelog-builder.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          artifacts: ${{ github.workspace }}/target/docsource.jar
          draft: true
          prerelease: true
          allowUpdates: true

  build-native:
    name: 'Build native image ${{ matrix.platform }}'
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'windows-latest', 'macos-latest' ]
        include:
          - os: 'ubuntu-latest'
            platform: 'linux-amd64'
          - os: 'macos-latest'
            platform: 'darwin-arm64'
          - os: 'windows-latest'
            platform: 'windows-amd64'
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: '21.0.1'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test
        run: mvn clean package -Pnative -PnativeTest

      - name: Publish native test report
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: '**/target/native-test-reports/TEST-*.xml'

      - name: Docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          LATEST_VERSION=$(git tag -l --sort=-version:refname | head -1 | cut -d 'v' -f 2)
          if [ "$LATEST_VERSION" == "$CURRENT_VERSION" ]; then
            echo "Latest version is $LATEST_VERSION. Current version is $CURRENT_VERSION. Pushing latest tag."
            mvn clean package -DskipTests -Pnative jib:build -Djib.to.auth.username=$DOCKER_USER -Djib.to.auth.password=$DOCKER_TOKEN -Djib.to.tags=latest
          else
            echo "Latest version is $LATEST_VERSION. Current version is $CURRENT_VERSION. Pushing latest tag."
            mvn clean package -DskipTests -Pnative jib:build -Djib.to.auth.username=$DOCKER_USER -Djib.to.auth.password=$DOCKER_TOKEN
          fi
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      - name: Generate release changelog
        uses: mikepenz/release-changelog-builder-action@v5
        id: build_changelog
        with:
          configuration: "changelog-builder.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive release
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: ${{ matrix.os == 'windows-latest' && 'zip' || 'tar' }}
          filename: ${{ matrix.os == 'windows-latest' && format('docsource-{0}.zip',matrix.platform) || format('docsource-{0}.tar.gz',matrix.platform) }}
          directory: target
          path: ${{ matrix.os == 'windows-latest' && 'docsource.exe' || 'docsource' }}

      - name: Update release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          artifacts: ${{ github.workspace }}/target/docsource
          draft: true
          prerelease: true
          allowUpdates: true